name: CI/CD
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Unit-Test:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Run Unit Tests
        run: |
          pnpm test:coverage
          ls -la coverage/
        env:
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
      - name: Save coverage summary
        if: github.event_name == 'pull_request'
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            mkdir -p ./coverage-summary
            cp coverage/coverage-summary.json ./coverage-summary/summary.json
          else
            echo "No coverage report found"
            exit 1
          fi
      - uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: coverage-summary
          path: coverage-summary/
          retention-days: 1
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jest-coverage-report
          path: coverage/
          retention-days: 30

  Deploy-Preview:
    needs: Unit-Test
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        id: preview
        run: echo "url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})" >> "${GITHUB_OUTPUT}"
    outputs:
      preview-url: ${{ steps.preview.outputs.url }}

  Comment-PR:
    needs: Deploy-Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            🚀 プレビューデプロイが完了しました！ -> ${{ needs.Deploy-Preview.outputs.preview-url }}
          comment_tag: preview-deployment
          mode: recreate

  Comment-Coverage:
    needs: Unit-Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage-summary
      - name: Read coverage summary
        id: coverage
        run: |
          SUMMARY=$(cat coverage-summary/summary.json)
          # JSONをエスケープして1行に整形
          ESCAPED_SUMMARY=$(echo "$SUMMARY" | jq -c '.' | sed 's/"/\\"/g')
          echo "summary=$ESCAPED_SUMMARY" >> $GITHUB_OUTPUT
      - name: Format coverage report
        id: format
        run: |
          SUMMARY=$(cat coverage-summary/summary.json)
          STATEMENTS=$(echo "$SUMMARY" | jq -r '.total.statements.pct')
          BRANCHES=$(echo "$SUMMARY" | jq -r '.total.branches.pct')
          FUNCTIONS=$(echo "$SUMMARY" | jq -r '.total.functions.pct')
          LINES=$(echo "$SUMMARY" | jq -r '.total.lines.pct')
          echo "statements=$STATEMENTS" >> $GITHUB_OUTPUT
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "lines=$LINES" >> $GITHUB_OUTPUT
      - name: Comment Coverage Report
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ## 📊 テストカバレッジレポート

            | 項目 | カバレッジ |
            |------|------------|
            | Statements | ${{ steps.format.outputs.statements }}% |
            | Branches | ${{ steps.format.outputs.branches }}% |
            | Functions | ${{ steps.format.outputs.functions }}% |
            | Lines | ${{ steps.format.outputs.lines }}% |
          comment_tag: coverage-report
          mode: recreate
      - name: Debug JSON
        run: |
          echo "JSON content:"
          cat coverage-summary/summary.json
          echo "JSON structure:"
          jq '.' coverage-summary/summary.json

  E2E-Test:
    needs: Deploy-Preview
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Install dependencies
        run: pnpm install
      - name: Install dependencies
        run: pnpm exec playwright install --with-deps
      - name: Run tests
        run: pnpm exec playwright test
        env:
          NODE_ENV: development
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          BASE_URL: ${{ needs.Deploy-Preview.outputs.preview-url }}
      # テスト結果をJSONとして出力
      - name: Generate test results
        if: always()
        run: |
          mkdir -p ./playwright-summary
          pnpm exec playwright show-report --reporter json > ./playwright-summary/test-results.json
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - uses: actions/upload-artifact@v4
        if: always() && github.event_name == 'pull_request'
        with:
          name: playwright-summary
          path: playwright-summary/
          retention-days: 1

  Comment-Playwright:
    needs: E2E-Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: playwright-summary
          path: playwright-summary
      - name: Format test results
        id: format
        if: hashFiles('playwright-summary/test-results.json') != ''
        run: |
          RESULTS=$(cat playwright-summary/test-results.json)
          TOTAL=$(echo "$RESULTS" | jq '.stats.total')
          PASSED=$(echo "$RESULTS" | jq '.stats.passed')
          FAILED=$(echo "$RESULTS" | jq '.stats.failures')
          FLAKY=$(echo "$RESULTS" | jq '.stats.flaky')
          SKIPPED=$(echo "$RESULTS" | jq '.stats.skipped')
          DURATION=$(echo "$RESULTS" | jq '.stats.duration')

          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "flaky=$FLAKY" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
      - name: Comment Playwright Results
        uses: thollander/actions-comment-pull-request@v2
        if: hashFiles('playwright-summary/test-results.json') != ''
        with:
          message: |
            ## 🎭 Playwright E2Eテスト結果

            | 項目 | 件数 |
            |------|------|
            | 総テスト数 | ${{ steps.format.outputs.total }} |
            | 成功 ✅ | ${{ steps.format.outputs.passed }} |
            | 失敗 ❌ | ${{ steps.format.outputs.failed }} |
            | Flaky 🔄 | ${{ steps.format.outputs.flaky }} |
            | スキップ ⏭️ | ${{ steps.format.outputs.skipped }} |
            | 実行時間 ⏱️ | ${{ steps.format.outputs.duration }}ms |

            詳細なレポートは Artifacts の `playwright-report` で確認できます。
          comment_tag: playwright-report
          mode: recreate
