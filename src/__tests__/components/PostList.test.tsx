import { render, screen, fireEvent } from "@testing-library/react";
import { PostList } from "~/components/PostList";
import { withTRPC } from "../utils/test-utils";
import { api } from "~/utils/api";

// tRPC„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock("~/utils/api", () => ({
  api: {
    useContext: jest.fn(() => ({})),
    emotionTag: {
      getAll: {
        useQuery: jest.fn(() => ({
          data: [
            { id: "clh1234567890", name: "ÊÄí„Çä" },
            { id: "clh1234567891", name: "ÊÇ≤„Åó„Åø" },
            { id: "clh1234567892", name: "‰∏çÂÆâ" },
          ],
        })),
      },
    },
    post: {
      getAll: {
        useInfiniteQuery: jest.fn(() => ({
          data: {
            pages: [
              {
                items: [
                  {
                    id: "1",
                    content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                    createdAt: new Date().toISOString(),
                    emotionTag: {
                      id: "clh1234567890",
                      name: "ÊÄí„Çä",
                    },
                    ipAddress: "127.0.0.1",
                    stamps: [],
                  },
                ],
                nextCursor: null,
              },
            ],
          },
          isLoading: false,
        })),
      },
      getClientIp: {
        useQuery: jest.fn(() => ({
          data: "127.0.0.1",
        })),
      },
      addStamp: {
        useMutation: jest.fn(() => ({
          mutate: jest.fn(),
          isPending: false,
        })),
      },
      delete: {
        useMutation: jest.fn(() => ({
          mutate: jest.fn(),
        })),
      },
    },
  },
}));

const WrappedPostList = withTRPC(PostList);

// „É¢„ÉÉ„ÇØÈñ¢Êï∞„ÅÆÂûã„Çí‰øÆÊ≠£
const mockGetAllQuery = api.post.getAll.useInfiniteQuery as jest.Mock;

describe("PostList", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("ÊäïÁ®ø‰∏ÄË¶ß„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
    render(<WrappedPostList />);
    expect(screen.getByText("„ÉÜ„Çπ„ÉàÊäïÁ®ø")).toBeInTheDocument();
  });

  it("ÊÑüÊÉÖ„Çø„Ç∞„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åß„Åç„Çã", () => {
    render(<WrappedPostList />);
    const select = screen.getByRole("combobox", { name: /„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ/i });
    fireEvent.change(select, { target: { value: "clh1234567890" } });
    expect(select).toHaveValue("clh1234567890");
  });

  it("ÊäïÁ®ø„ÅÆ‰∏¶„Å≥È†Ü„ÇíÂ§âÊõ¥„Åß„Åç„Çã", () => {
    render(<WrappedPostList />);
    const select = screen.getByRole("combobox", { name: /Êñ∞„Åó„ÅÑÈ†Ü/i });
    fireEvent.change(select, { target: { value: "asc" } });
    expect(select).toHaveValue("asc");
  });

  it("Ëá™ÂàÜ„ÅÆÊäïÁ®ø„ÇíÂâäÈô§„Åß„Åç„Çã", () => {
    const mockConfirm = jest.spyOn(window, "confirm");
    mockConfirm.mockReturnValue(true);

    render(<WrappedPostList />);
    const deleteButton = screen.getByText("ÂâäÈô§");
    fireEvent.click(deleteButton);

    expect(mockConfirm).toHaveBeenCalledWith(
      "„Åì„ÅÆÊäïÁ®ø„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü Êú¨Êó•„ÅÆÂÜçÊäïÁ®ø„ÅØ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ",
    );
  });

  it("„Çπ„Çø„É≥„Éó„ÇíËøΩÂä†„Åß„Åç„Çã", () => {
    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    fireEvent.click(thanksButton);

    const loveButton = screen.getByRole("button", { name: "Â§ßÂ•Ω„Åç„Éú„Çø„É≥" });
    fireEvent.click(loveButton);
  });

  it("„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„Å´„Çπ„Éî„Éä„Éº„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
    mockGetAllQuery.mockReturnValueOnce({
      isLoading: true,
    });

    render(<WrappedPostList />);
    expect(screen.getByRole("status")).toBeInTheDocument();
  });

  it("ÊäïÁ®ø„Åå0‰ª∂„ÅÆÂ†¥Âêà„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„ÄÅ„Éï„Ç£„É´„Çø„ÉºUI„ÇÇË°®Á§∫„Åï„Çå„Çã", () => {
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    expect(screen.getByText("ÊäïÁ®ø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")).toBeInTheDocument();

    // „Éï„Ç£„É´„Çø„ÉºUI„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(
      screen.getByRole("combobox", { name: /„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ/i }),
    ).toBeInTheDocument();
    expect(
      screen.getByRole("combobox", { name: /Êñ∞„Åó„ÅÑÈ†Ü/i }),
    ).toBeInTheDocument();

    // „Éï„Ç£„É´„Çø„Éº„ÅåÊ©üËÉΩ„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const emotionSelect = screen.getByRole("combobox", {
      name: /„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ/i,
    });
    fireEvent.change(emotionSelect, { target: { value: "clh1234567890" } });
    expect(emotionSelect).toHaveValue("clh1234567890");

    const orderSelect = screen.getByRole("combobox", { name: /Êñ∞„Åó„ÅÑÈ†Ü/i });
    fireEvent.change(orderSelect, { target: { value: "asc" } });
    expect(orderSelect).toHaveValue("asc");
  });

  it("„Çπ„Çø„É≥„Éó„Åå‰ªò„ÅÑ„Å¶„ÅÑ„ÇãÊäïÁ®ø„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: new Date().toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "127.0.0.1",
                stamps: [
                  { type: "thanks", ipAddress: "127.0.0.1" },
                  { type: "love", ipAddress: "127.0.0.1" },
                  { type: "thanks", ipAddress: "127.0.0.2" },
                ],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    const thanksCount = screen.getByText("2");
    const loveCount = screen.getByText("1");
    expect(thanksCount).toBeInTheDocument();
    expect(loveCount).toBeInTheDocument();
  });

  it("ÂâäÈô§„Çí„Ç≠„É£„É≥„Çª„É´„Åß„Åç„Çã", () => {
    const mockConfirm = jest.spyOn(window, "confirm");
    mockConfirm.mockReturnValue(false);

    render(<WrappedPostList />);
    const deleteButton = screen.getByText("ÂâäÈô§");
    fireEvent.click(deleteButton);

    expect(mockConfirm).toHaveBeenCalledWith(
      "„Åì„ÅÆÊäïÁ®ø„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü Êú¨Êó•„ÅÆÂÜçÊäïÁ®ø„ÅØ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ",
    );
    expect(api.post.delete.useMutation().mutate).not.toHaveBeenCalled();
  });

  it("„Çπ„Çø„É≥„Éó„ÅÆ„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅØ„Éú„Çø„É≥„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Çã", () => {
    const mockAddStamp = api.post.addStamp.useMutation as jest.Mock;
    mockAddStamp.mockReturnValueOnce({
      mutate: jest.fn(),
      isPending: true,
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    const loveButton = screen.getByRole("button", { name: "Â§ßÂ•Ω„Åç„Éú„Çø„É≥" });

    expect(thanksButton).toBeDisabled();
    expect(loveButton).toBeDisabled();
  });

  it("ÊÑüÊÉÖ„Çø„Ç∞„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Çã", () => {
    render(<WrappedPostList />);
    const emotionTagButton = screen.getByRole("button", { name: /üò† ÊÄí„Çä/ });
    fireEvent.click(emotionTagButton);

    const select = screen.getByRole("combobox", { name: /„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ/i });
    expect(select).toHaveValue("clh1234567890");
  });

  it("ÊäïÁ®ø„ÅÆÊôÇÂàª„ÅåÊ≠£„Åó„Åè„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„Çã", () => {
    const testDate = new Date("2024-03-20T15:30:00");
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: testDate.toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "127.0.0.1",
                stamps: [],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    expect(screen.getByText("15:30")).toBeInTheDocument();
  });

  it("„Çπ„Çø„É≥„Éó„Éú„Çø„É≥„ÅÆÈÅ∏ÊäûÁä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã", () => {
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: new Date().toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "127.0.0.1",
                stamps: [
                  { type: "thanks", ipAddress: "127.0.0.1" },
                  { type: "love", ipAddress: "127.0.0.1" },
                ],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    const loveButton = screen.getByRole("button", {
      name: "Â§ßÂ•Ω„Åç„Éú„Çø„É≥",
    });

    expect(thanksButton).toHaveClass("bg-blue-500", "text-white");
    expect(loveButton).toHaveClass("bg-blue-500", "text-white");
  });

  it("„Çπ„Çø„É≥„Éó„ÅÆËøΩÂä†Âæå„Å´„Éá„Éº„Çø„ÅåÂÜçÂèñÂæó„Åï„Çå„Çã", () => {
    const mockInvalidate = jest.fn();
    (api.useContext as jest.Mock).mockReturnValueOnce({
      post: {
        getAll: {
          invalidate: mockInvalidate,
        },
      },
    });

    const mockAddStamp = jest.fn();
    (api.post.addStamp.useMutation as jest.Mock).mockReturnValueOnce({
      mutate: mockAddStamp,
      isPending: false,
      onSettled: jest.fn(),
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    fireEvent.click(thanksButton);

    // onSettled„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const mutationOptions = (api.post.addStamp.useMutation as jest.Mock).mock
      .calls[0][0];
    mutationOptions.onSettled();

    expect(mockInvalidate).toHaveBeenCalled();
  });

  it("ÊäïÁ®ø„ÅÆÂâäÈô§Âæå„Å´„Éá„Éº„Çø„ÅåÂÜçÂèñÂæó„Åï„Çå„Çã", () => {
    const mockInvalidate = jest.fn();
    (api.useContext as jest.Mock).mockReturnValue({
      post: {
        getAll: {
          invalidate: mockInvalidate,
        },
      },
    });

    const mockMutate = jest.fn();
    (api.post.delete.useMutation as jest.Mock).mockReturnValue({
      mutate: mockMutate,
      onSuccess: () => {
        mockInvalidate();
      },
    });

    const mockConfirm = jest.spyOn(window, "confirm");
    mockConfirm.mockReturnValue(true);

    render(<WrappedPostList />);
    const deleteButton = screen.getByText("ÂâäÈô§");
    fireEvent.click(deleteButton);

    // onSuccess„ÇíÊâãÂãï„ÅßÂëº„Å≥Âá∫„Åô
    const mutationOptions = (api.post.delete.useMutation as jest.Mock).mock
      .calls[0][0];
    mutationOptions.onSuccess();

    expect(mockInvalidate).toHaveBeenCalled();
  });

  it("Ëá™ÂàÜ„ÅÆÊäïÁ®ø„Åß„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ", () => {
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: new Date().toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "192.168.1.1", // Áï∞„Å™„ÇãIP„Ç¢„Éâ„É¨„Çπ
                stamps: [],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    expect(screen.queryByText("ÂâäÈô§")).not.toBeInTheDocument();
  });

  it("‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆÊäïÁ®ø„Å´„ÅØÂâäÈô§„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ", () => {
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: new Date().toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "192.168.1.1", // Áï∞„Å™„ÇãIP„Ç¢„Éâ„É¨„Çπ
                stamps: [],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    render(<WrappedPostList />);
    expect(screen.queryByText("ÂâäÈô§")).not.toBeInTheDocument();
  });

  it("„Çπ„Çø„É≥„Éó„ÅÆËøΩÂä†ÊôÇ„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„ÅåÊ≠£„Åó„ÅèÊõ¥Êñ∞„Åï„Çå„Çã", async () => {
    const mockContext = {
      post: {
        getAll: {
          cancel: jest.fn(),
          getInfiniteData: jest.fn(() => ({
            pages: [
              {
                items: [
                  {
                    id: "1",
                    stamps: [],
                  },
                ],
              },
            ],
          })),
          setInfiniteData: jest.fn(),
          invalidate: jest.fn(),
        },
      },
    };

    (api.useContext as jest.Mock).mockReturnValue(mockContext);

    const mockAddStamp = api.post.addStamp.useMutation as jest.Mock;
    const mockMutate = jest.fn();
    const onMutate = jest.fn();
    mockAddStamp.mockReturnValue({
      mutate: mockMutate,
      isPending: false,
      onMutate,
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    fireEvent.click(thanksButton);

    // onMutate„ÇíÊâãÂãï„ÅßÂëº„Å≥Âá∫„Åô
    const mutationOptions = mockAddStamp.mock.calls[0][0];
    await mutationOptions.onMutate({ postId: "1", type: "thanks" });

    expect(mockContext.post.getAll.cancel).toHaveBeenCalled();
    expect(mockContext.post.getAll.setInfiniteData).toHaveBeenCalled();
  });

  it("„Çπ„Çø„É≥„Éó„ÅÆËøΩÂä†„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„Å´ÂÖÉ„ÅÆ„Éá„Éº„Çø„Å´Êàª„Çã", async () => {
    const prevData = {
      pages: [
        {
          items: [
            {
              id: "1",
              stamps: [],
            },
          ],
        },
      ],
    };

    const mockContext = {
      post: {
        getAll: {
          cancel: jest.fn(),
          getInfiniteData: jest.fn(() => prevData),
          setInfiniteData: jest.fn(),
          invalidate: jest.fn(),
        },
      },
    };

    (api.useContext as jest.Mock).mockReturnValue(mockContext);

    const mockAddStamp = api.post.addStamp.useMutation as jest.Mock;
    const mockMutate = jest.fn();
    mockAddStamp.mockReturnValue({
      mutate: mockMutate,
      isPending: false,
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    fireEvent.click(thanksButton);

    // „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„ÇíÊâãÂãï„ÅßÂëº„Å≥Âá∫„Åô
    const mutationOptions = mockAddStamp.mock.calls[0][0];
    await mutationOptions.onMutate({ postId: "1", type: "thanks" });
    mutationOptions.onError(
      new Error(),
      { postId: "1", type: "thanks" },
      { prevData },
    );

    expect(mockContext.post.getAll.setInfiniteData).toHaveBeenCalledWith(
      expect.any(Object),
      prevData,
    );
  });

  it("ÊäïÁ®ø„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Åï„Çå„Çã", async () => {
    // Ëá™ÂàÜ„ÅÆÊäïÁ®ø„ÅÆ„Éá„Éº„Çø„ÇíË®≠ÂÆö
    mockGetAllQuery.mockReturnValueOnce({
      data: {
        pages: [
          {
            items: [
              {
                id: "1",
                content: "„ÉÜ„Çπ„ÉàÊäïÁ®ø",
                createdAt: new Date().toISOString(),
                emotionTag: {
                  id: "clh1234567890",
                  name: "ÊÄí„Çä",
                },
                ipAddress: "127.0.0.1", // „ÇØ„É©„Ç§„Ç¢„É≥„ÉàIP„Å®Âêå„Åò
                stamps: [],
              },
            ],
            nextCursor: null,
          },
        ],
      },
      isLoading: false,
    });

    const mockDelete = api.post.delete.useMutation as jest.Mock;
    const mockMutate = jest.fn();
    mockDelete.mockReturnValue({
      mutate: mockMutate,
      onError: jest.fn(),
    });

    const mockConfirm = jest.spyOn(window, "confirm");
    mockConfirm.mockReturnValue(true);

    render(<WrappedPostList />);
    const deleteButton = screen.getByText("ÂâäÈô§");
    fireEvent.click(deleteButton);

    expect(mockMutate).toHaveBeenCalled();
  });

  it("„Çπ„Çø„É≥„Éó„ÅÆËøΩÂä†„ÅåÊàêÂäü„Åó„ÅüÂ†¥Âêà„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„ÅåÊõ¥Êñ∞„Åï„Çå„Çã", () => {
    const mockContext = {
      post: {
        getAll: {
          cancel: jest.fn(),
          getInfiniteData: jest.fn(() => ({
            pages: [
              {
                items: [
                  {
                    id: "1",
                    stamps: [],
                  },
                ],
              },
            ],
          })),
          setInfiniteData: jest.fn(),
          invalidate: jest.fn(),
        },
      },
    };

    (api.useContext as jest.Mock).mockReturnValue(mockContext);

    const mockAddStamp = api.post.addStamp.useMutation as jest.Mock;
    const mockMutate = jest.fn();
    mockAddStamp.mockReturnValue({
      mutate: mockMutate,
      isPending: false,
      onSettled: jest.fn(),
    });

    render(<WrappedPostList />);
    const thanksButton = screen.getByRole("button", {
      name: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Éú„Çø„É≥",
    });
    fireEvent.click(thanksButton);

    // ÊàêÂäü„Éè„É≥„Éâ„É©„Éº„ÇíÊâãÂãï„ÅßÂëº„Å≥Âá∫„Åô
    const mutationOptions = mockAddStamp.mock.calls[0][0];
    mutationOptions.onSuccess(
      { id: "1", stamps: [{ type: "thanks", ipAddress: "127.0.0.1" }] },
      { postId: "1", type: "thanks" },
    );

    // onSettled„ÇíÊâãÂãï„ÅßÂëº„Å≥Âá∫„Åô
    mutationOptions.onSettled();

    expect(mockContext.post.getAll.setInfiniteData).toHaveBeenCalled();
    expect(mockContext.post.getAll.invalidate).toHaveBeenCalled();
  });

  it("„ÇØ„É©„Ç§„Ç¢„É≥„ÉàIP„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇË°®Á§∫„Åï„Çå„Çã", () => {
    const mockGetClientIp = api.post.getClientIp.useQuery as jest.Mock;
    mockGetClientIp.mockReturnValue({
      data: undefined,
    });

    render(<WrappedPostList />);
    expect(screen.getByText("„ÉÜ„Çπ„ÉàÊäïÁ®ø")).toBeInTheDocument();
  });

  it("ÊÑüÊÉÖ„Çø„Ç∞„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„Åß„ÇÇ„Éï„Ç£„É´„Çø„ÉºUI„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
    const mockGetEmotionTags = api.emotionTag.getAll.useQuery as jest.Mock;
    mockGetEmotionTags.mockReturnValue({
      data: undefined,
    });

    render(<WrappedPostList />);
    const select = screen.getByRole("combobox", { name: /„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ/i });
    expect(select).toBeInTheDocument();
    expect(select.children.length).toBe(1); // "„Åô„Åπ„Å¶„ÅÆÊÑüÊÉÖ" „Ç™„Éó„Ç∑„Éß„É≥„ÅÆ„Åø
  });
});
