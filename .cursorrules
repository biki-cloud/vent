You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

About the Test

- Whenever you modify or add code, be sure to modify the jest test code involved.
- After modifying the test code, be sure to run/modify it repeatedly until the test is successful.
- Try to resolve type errors as much as possible.
- when you test, you should execute "pnpm test:coverage"
- when you modify source code, you should run test.
- you do not use vitest. you do not install vitest.
- As long as the current behavior is not changed, it is possible to change the structure and logic of the source code to make it easier to test.
- If the unit tests do not pass even after multiple corrections, you can temporarily set it to "ignore."

About environment variable

- in local and dev environment, we use .env environment file.
- in production environment, we use .env.prd environment file.

Abount nodes command

- if there is a command that you want to execute in package.json, you should use it's command.

About shadcn command

- you can able to use shadcn this command: "pnpm dlx shadcn@latest add [component]"

Follow Next.js docs for Data Fetching, Rendering, and Routing.
